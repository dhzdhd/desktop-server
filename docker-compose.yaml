services:
  swag:
    container_name: swag
    image: linuxserver/swag:latest
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
      - VALIDATION=dns
      - SUBDOMAINS=wildcard
      - ONLY_SUBDOMAINS=true
    env_file:
      - .env
    volumes:
      - ./data/swag/config:/config

  db_postgres:
    container_name: db_postgres
    image: tensorchord/pgvecto-rs:pg16-v0.2.0
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    env_file:
      - env/database.env
    volumes:
      - db_postgres:/var/lib/postgresql/data
      - ./data/postgres:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping || exit 1

  # backup:
  #   container_name: backup

  # Authentication
  authelia:
    container_name: authelia
    image: authelia/authelia:4.38
    user: 1000:1000
    environment:
      - TZ=Asia/Kolkata
    env_file:
      - env/authelia.env
    volumes:
      - ./data/authelia:/config
    restart: unless-stopped

  # Homepage
  homepage:
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:latest
    env_file:
      - .env
    volumes:
      - ./data/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock

  # Document archiver
  papra:
    container_name: papra
    image: ghcr.io/papra-hq/papra:latest-root
    env_file:
      - .env
    volumes:
      - ./data/papra:/app/app-data
    restart: unless-stopped

  # Password manager
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    env_file:
      - .env
    volumes:
      - ./data/vaultwarden:/data
    restart: unless-stopped

  # URL shortener
  kutt:
    container_name: kutt
    image: kutt/kutt:latest
    environment:
      - DB_CLIENT=pg
      - DB_HOST=db_postgres
      - DB_PORT=5432
      - REDIS_ENABLED=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env
    volumes:
      - ./data/kutt:/config
    restart: unless-stopped
    depends_on:
      db_postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # File server with webdav support
  dufs:
    container_name: dufs
    image: sigoden/dufs:latest
    environment:
      - DUFS_ALLOW_ALL=true
    env_file:
      - .env
    volumes:
      - ./data/dufs:/data
    restart: unless-stopped

  # Media server
  immich:
    container_name: immich
    image: altran1502/immich-server:release
    environment:
      - TZ=Asia/Kolkata
    env_file:
      - env/immich.env
    volumes:
      - ./data/immich/media:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - redis
      - db_postgres
    restart: unless-stopped
    healthcheck:
      disable: false

  # Monitoring data source for grafana
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    env_file:
      - .env
    volumes:
      - ./data/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Monitoring server metrics
  node_exporter:
    container_name: node_exporter
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  # Monitoring docker metrics
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    depends_on:
      - redis

  # Monitoring
  grafana:
    container_name: grafana
    image: grafana/grafana-oss:latest
    env_file:
      - .env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./data/grafana/provisioning:/etc/grafana/provisioning

    restart: unless-stopped

  # Monitoring log collection
  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./data/loki/:/etc/loki/
    restart: unless-stopped

  # Monitoring data collector
  alloy:
    container_name: alloy
    image: grafana/alloy:latest
    command: 
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    volumes:
      - ./data/alloy/:/etc/alloy/
    restart: unless-stopped

volumes:
  db_postgres:
  db_mysql:
  grafana_data:
  prometheus_data:
